class ZBlock{
    field int r,c;
    field int type;	
    constructor ZBlock new(Map A)
    {
        let r = 1;
        let c = 4;
        let type = 0;
        do A.set(r,c);
        do A.set(r,c+1);
        do A.set(r+1,c+1);
        do A.set(r+1, c+2);
        return this;
    }

    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    // Put into ZBlock.jack

    method void Z_rotate(Map M, Block B)
    {	
      	
      var int r; 
      var int c;
      let r = B.getR(); 
      let c = B.getC();          

      if ((r> 0) & (c> 0) & (c< 9))
      {
        if (( M.read(r ,c)= 1 ) & ( M.read(r-1 ,c-1)= 1 ) & ( M.read(r-1 ,c)= 1 ) & ( M.read(r ,c+1)= 1 ))
          {let type= 0;}
      }

      if ((r> 0) & (r< 19) & (c> 0))
      {
        if (( M.read(r ,c)= 1 ) & ( M.read(r-1 ,c)= 1 ) & ( M.read(r ,c-1)= 1 ) & ( M.read(r+1 ,c-1)= 1 ))
          {let type= 1;}
      }

      if (type= 0)
      {	
        if (r= 19)
        {
          // cannot collide w/ others
          if (( M.read(r-2 ,c)= 1 ) | ( M.read(r ,c-1)= 1 ))
            {return;}

          // implement
          do M.reset(r, c);
          do M.reset(r, c+1);
          do M.set(r-2, c);
          do M.set(r, c-1);

          do B.setR(18);
        }
        else
        {
          // cannot collide w/ others
          if (( M.read(r ,c-1)= 1 ) | ( M.read(r+1 ,c-1)= 1 ))
            {return;}

          // implement
          do M.reset(r-1, c-1);
          do M.reset(r, c+1);
          do M.set(r, c-1);
          do M.set(r+1, c-1);
        }
      }

      if (type= 1)
      {	
        if (c= 9)
        {
          // cannot collide w/ others
          if (( M.read(r-1 ,c-2)= 1 ) | ( M.read(r-1 ,c-1)= 1 ))
            {return;}

          // implement
          do M.reset(r-1, c);
          do M.reset(r+1, c-1);
          do M.set(r-1, c-2);
          do M.set(r-1, c-1);

          do B.setC(8);
        }
        else
        {
          // cannot collide w/ others
          if (( M.read(r-1 ,c-1)= 1 ) | ( M.read(r ,c+1)= 1 ))
            {return;}

          // implement
          do M.reset(r, c-1);
          do M.reset(r+1, c-1);
          do M.set(r-1, c-1);
          do M.set(r, c+1);
        }
      }
    return;
    }

    method void down(Map M,Block B)
    {
      var int r;
      var int c;
      let r = B.getR();
      let c = B.getC();

      if (type = 0)
      {
        if (r<19)
        {
          if ((M.read(r,c-1)=1)|(M.read(r+1,c)=1)|(M.read(r+1,c+1)=1))
          {
            return ;
          }
          else
          {
            do M.reset(r-1,c-1);
            do M.reset(r-1,c);
            do M.reset(r,c+1);
            do M.set(r,c-1);
            do M.set(r+1,c);
            do M.set(r+1,c+1);

            do B.setR(r+1);
          }
        }
        return ;
      }
      if (type = 1)
      {
        if (r<18)
        {
          if ((M.read(r+2,c-1)=1)|(M.read(r+1,c)=1))
          {
            return;
          }
          else
          {
            do M.reset(r,c-1);
            do M.reset(r-1,c);
            do M.set(r+2,c-1);
            do M.set(r+1,c);

            do B.set(r+1);
          }
        }
        return ;
      }

      return ;
    }

}