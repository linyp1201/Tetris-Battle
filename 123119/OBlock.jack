class OBlock{
    field int r,c;

    constructor OBlock new(Map A,Block B)
    {
        //let r = 0;
        //let c = 4;
        do B.setR(0);
        do B.setC(4);
        /*do A.set(r,c);
        do A.set(r,c+1);
        do A.set(r+1,c);
        do A.set(r+1, c+1);*/
        return this;
    }

    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

    method void create_block(Map A, Block B){
        do B.setR(0);
        do B.setC(4);
        let r = B.getR();
        let c = B.getC();
        do A.set(r,c);
        do A.set(r,c+1);
        do A.set(r+1,c);
        do A.set(r+1, c+1);

        return;
    }

    method void down(Map M,Block B)
    {
      var int r;
      var int c;
      let r = B.getR();
      let c = B.getC();
      if (r<18)
      {
        if ((M.read(r+2,c)=1)|(M.read(r+2,c+1)=1))
        {
          return ;
        }
        else
        {
          do M.reset(r,c);
          do M.reset(r,c+1);
          do M.set(r+2,c);
          do M.set(r+2,c+1);

          do B.setR(r+1);
        }
      }
      return ;
    }
    method void left(Map M, Block B)
    {
	
        var int r; 
	      var int c; 
        let r= B.getR();
        let c= B.getC();


      if (c= 0)
      {
        return;
      }

      if ( (M.read(r, c-1)= 0) & (M.read(r+1, c-1)= 0) )
      {
        do M.set(r, c-1);
        do M.set(r+1, c-1);
        do M.reset(r, c+1);
        do M.reset(r+1, c+1);

        do B.setC(c-1);
      }

      return;	
    }

method void right(Map M, Block B)
{
	
        var int r; 
	      var int c; 
        let r= B.getR();
        let c= B.getC();

	if (c= 8)
	{
		return;
	}

	if ( (M.read(r, c+2)= 0) & (M.read(r+1, c+2)= 0) )
	{
		do M.set(r, c+2);
		do M.set(r+1, c+2);
		do M.reset(r, c);
		do M.reset(r+1, c);

		do B.setC(c+1);
	}

	return;	
  }

  method boolean O_isBottom(Map M,Block B)
  {
      var boolean isbottom;
      var int r;
      var int c;
      let r = B.getR();
      let c = B.getC();
      if (r>18)
      {
        if ((M.read(r+2,c)=1)|(M.read(r+2,c+1)=1))
        {
          let isbottom = true;
        }
        else
        {
          let isbottom = false;
        }
      }
      else
      {
        let isbottom = true;
      }

      return isbottom;
  }

  }

